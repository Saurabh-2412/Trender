{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst fetchPosts = async () => {\n  return axios.get(\"https://social-media-server.tanaypratap.repl.co/posts\");\n};\n\nexport const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\n  const response = await fetchPosts();\n  return response.data;\n});\nexport const postSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    posts: [{\n      /**\r\n      {\r\n         postID: \"p1201\",\r\n         caption: \"learning redux\",\r\n         likes: 22,\r\n         user: {\r\n             userID: \"u1234\",\r\n             name: \"tanay\"\r\n         }\r\n      },\r\n      {\r\n         postID: \"p1202\",\r\n         caption: \"it's frustrating to begin\",\r\n         likes: 24,\r\n         user: {\r\n             userID: \"u1234\",\r\n             name: \"tanay\"\r\n         }\r\n      },\r\n      */\n    }]\n  },\n  reducers: {\n    LikesClicked: (state, action) => {\n      const posts = state.posts.map(post => post.postID === action.payload ? { ...post,\n        likes: post.likes + 1\n      } : post);\n      return { ...state,\n        posts\n      };\n    },\n    DisLikesClicked: (state, action) => {\n      const postIndex = state.posts.findIndex(post => post.postID === action.payload);\n      state.posts[postIndex].likes -= 1;\n    }\n  },\n  extraReducers: {\n    [loadPosts.pending]: state => {\n      state.status = \"loading\";\n    },\n    [loadPosts.fulfilled]: (state, {\n      payload\n    }) => {\n      state.status = \"fulfilled\";\n      state.posts = payload.posts;\n    },\n    [loadPosts.rejected]: (state, action) => {\n      state.status = \"error\";\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  LikesClicked,\n  DisLikesClicked\n} = postSlice.actions;\nexport default postSlice.reducer;","map":{"version":3,"sources":["E:/NeogCampProjects/LevelOneProjects/Social-Media/social-media-app/src/features/posts/postSlice.js"],"names":["createAsyncThunk","createSlice","axios","fetchPosts","get","loadPosts","response","data","postSlice","name","initialState","posts","reducers","LikesClicked","state","action","map","post","postID","payload","likes","DisLikesClicked","postIndex","findIndex","extraReducers","pending","status","fulfilled","rejected","error","message","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAG,YAAY;AAC7B,SAAOD,KAAK,CAACE,GAAN,CAAU,uDAAV,CAAP;AACD,CAFD;;AAIA,OAAO,MAAMC,SAAS,GAAGL,gBAAgB,CAAC,iBAAD,EAAoB,YAAY;AACvE,QAAMM,QAAQ,GAAG,MAAMH,UAAU,EAAjC;AACA,SAAOG,QAAQ,CAACC,IAAhB;AACD,CAHwC,CAAlC;AAKP,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;AACjCQ,EAAAA,IAAI,EAAE,OAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,CACH;AAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBY,KADG;AADG,GAFmB;AA0BnCC,EAAAA,QAAQ,EAAE;AACJC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,YAAMJ,KAAK,GAAGG,KAAK,CAACH,KAAN,CAAYK,GAAZ,CAAiBC,IAAD,IAC1BA,IAAI,CAACC,MAAL,KAAgBH,MAAM,CAACI,OAAvB,GACE,EAAE,GAAGF,IAAL;AAAWG,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAAL,GAAa;AAA/B,OADF,GAEEH,IAHQ,CAAd;AAMA,aAAO,EAAE,GAAGH,KAAL;AAAYH,QAAAA;AAAZ,OAAP;AACH,KATO;AAURU,IAAAA,eAAe,EAAE,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAChC,YAAMO,SAAS,GAAGR,KAAK,CAACH,KAAN,CAAYY,SAAZ,CACbN,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgBH,MAAM,CAACI,OADnB,CAAlB;AAGAL,MAAAA,KAAK,CAACH,KAAN,CAAYW,SAAZ,EAAuBF,KAAvB,IAAgC,CAAhC;AACH;AAfO,GA1ByB;AA2CnCI,EAAAA,aAAa,EAAE;AACb,KAACnB,SAAS,CAACoB,OAAX,GAAsBX,KAAD,IAAW;AAC9BA,MAAAA,KAAK,CAACY,MAAN,GAAe,SAAf;AACD,KAHY;AAIb,KAACrB,SAAS,CAACsB,SAAX,GAAuB,CAACb,KAAD,EAAQ;AAAEK,MAAAA;AAAF,KAAR,KAAwB;AAC7CL,MAAAA,KAAK,CAACY,MAAN,GAAe,WAAf;AACAZ,MAAAA,KAAK,CAACH,KAAN,GAAcQ,OAAO,CAACR,KAAtB;AACD,KAPY;AAQb,KAACN,SAAS,CAACuB,QAAX,GAAsB,CAACd,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACY,MAAN,GAAe,OAAf;AACAZ,MAAAA,KAAK,CAACe,KAAN,GAAcd,MAAM,CAACc,KAAP,CAAaC,OAA3B;AACD;AAXY;AA3CoB,CAAD,CAA7B;AA0DP,OAAO,MAAM;AAAEjB,EAAAA,YAAF;AAAgBQ,EAAAA;AAAhB,IAAoCb,SAAS,CAACuB,OAApD;AACP,eAAevB,SAAS,CAACwB,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst fetchPosts = async () => {\r\n  return axios.get(\"https://social-media-server.tanaypratap.repl.co/posts\");\r\n};\r\n\r\nexport const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\r\n  const response = await fetchPosts();\r\n  return response.data;\r\n});\r\n\r\nexport const postSlice = createSlice({\r\n    name: \"posts\",\r\n    initialState: {\r\n        posts: [\r\n            {/**\r\n            {\r\n                postID: \"p1201\",\r\n                caption: \"learning redux\",\r\n                likes: 22,\r\n                user: {\r\n                    userID: \"u1234\",\r\n                    name: \"tanay\"\r\n                }\r\n            },\r\n            {\r\n                postID: \"p1202\",\r\n                caption: \"it's frustrating to begin\",\r\n                likes: 24,\r\n                user: {\r\n                    userID: \"u1234\",\r\n                    name: \"tanay\"\r\n                }\r\n            },\r\n            */}\r\n        ]\r\n  },\r\n  reducers: {\r\n        LikesClicked: (state, action) => {\r\n        const posts = state.posts.map((post) =>\r\n            post.postID === action.payload\r\n            ? { ...post, likes: post.likes + 1 }\r\n            : post\r\n        );\r\n\r\n        return { ...state, posts };\r\n    },\r\n    DisLikesClicked: (state, action) => {\r\n        const postIndex = state.posts.findIndex(\r\n            (post) => post.postID === action.payload\r\n        );\r\n        state.posts[postIndex].likes -= 1;\r\n    }\r\n  },\r\n  extraReducers: {\r\n    [loadPosts.pending]: (state) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [loadPosts.fulfilled]: (state, { payload }) => {\r\n      state.status = \"fulfilled\";\r\n      state.posts = payload.posts;\r\n    },\r\n    [loadPosts.rejected]: (state, action) => {\r\n      state.status = \"error\";\r\n      state.error = action.error.message;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { LikesClicked, DisLikesClicked } = postSlice.actions;\r\nexport default postSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}