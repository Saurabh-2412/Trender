{"ast":null,"code":"var _jsxFileName = \"E:\\\\NeogCampProjects\\\\LevelOneProjects\\\\Social-Media\\\\social-media-app\\\\src\\\\features\\\\user\\\\UserPost.js\",\n    _s = $RefreshSig$();\n\nimport { unwrapResult } from \"@reduxjs/toolkit\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { PostBody } from \"../../features/posts/PostBody\";\nimport { getUserPost } from \"../../features/posts/postSlice\";\nimport { orderPostByDate } from \"../../features/Utils/OrderedPostByDate\";\nimport { toastError } from \"../../features/Utils/ToastMessages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const UserPost = () => {\n  _s();\n\n  const [status, setStatus] = useState(\"idle\");\n  const {\n    user\n  } = useSelector(state => state.user);\n  const {\n    currentUser\n  } = useSelector(state => state.auth);\n  const {\n    posts\n  } = useSelector(state => state.posts);\n  const {\n    token\n  } = useSelector(state => state.auth);\n  const orderedPost = orderPostByDate(posts);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (token) {\n      (async () => {\n        try {\n          setStatus(\"pending\");\n          const result = await dispatch(getUserPost(user._id));\n          unwrapResult(result);\n          setStatus(\"success\");\n        } catch (error) {\n          console.log(error);\n          toastError(\"Something went wrong, cannot load post\");\n          setStatus(\"idle\");\n        }\n      })();\n    }\n  }, [dispatch, user._id, token]);\n  let renderContent = posts.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-center\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"p-2\",\n      children: \"No posts Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this) : React.Children.toArray(orderedPost === null || orderedPost === void 0 ? void 0 : orderedPost.map(post => /*#__PURE__*/_jsxDEV(PostBody, {\n    post: post\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 34\n  }, this)));\n\n  const checkExistingUser = (currentUser, randomUser) => {\n    return currentUser === randomUser;\n  };\n\n  const renderDeletePost = checkExistingUser(currentUser.userid, user._id) && /*#__PURE__*/_jsxDEV(DeletePost, {\n    user: user\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 81\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: status === \"success\" && renderContent\n  }, void 0, false);\n};\n\n_s(UserPost, \"vf6l+HURlhH/35KFWKzfPupdc/8=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = UserPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserPost\");","map":{"version":3,"sources":["E:/NeogCampProjects/LevelOneProjects/Social-Media/social-media-app/src/features/user/UserPost.js"],"names":["unwrapResult","React","useState","useEffect","useDispatch","useSelector","PostBody","getUserPost","orderPostByDate","toastError","UserPost","status","setStatus","user","state","currentUser","auth","posts","token","orderedPost","dispatch","result","_id","error","console","log","renderContent","length","Children","toArray","map","post","checkExistingUser","randomUser","renderDeletePost","userid"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,kBAA7B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,QAAT,QAAyB,+BAAzB;AACA,SAASC,WAAT,QAA4B,gCAA5B;AACA,SAASC,eAAT,QAAgC,wCAAhC;AACA,SAASC,UAAT,QAA2B,oCAA3B;;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,MAAD,CAApC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAWR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACD,IAAlB,CAA5B;AACA,QAAM;AAAEE,IAAAA;AAAF,MAAkBV,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACE,IAAlB,CAAnC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYZ,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACG,KAAlB,CAA7B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYb,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACE,IAAlB,CAA7B;AACA,QAAMG,WAAW,GAAGX,eAAe,CAACS,KAAD,CAAnC;AACA,QAAMG,QAAQ,GAAGhB,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,KAAJ,EAAW;AACT,OAAC,YAAY;AACX,YAAI;AACFN,UAAAA,SAAS,CAAC,SAAD,CAAT;AACA,gBAAMS,MAAM,GAAG,MAAMD,QAAQ,CAACb,WAAW,CAACM,IAAI,CAACS,GAAN,CAAZ,CAA7B;AACAtB,UAAAA,YAAY,CAACqB,MAAD,CAAZ;AACAT,UAAAA,SAAS,CAAC,SAAD,CAAT;AACD,SALD,CAKE,OAAOW,KAAP,EAAc;AACdC,UAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAd,UAAAA,UAAU,CAAC,wCAAD,CAAV;AACAG,UAAAA,SAAS,CAAC,MAAD,CAAT;AACD;AACF,OAXD;AAYD;AACF,GAfQ,EAeN,CAACQ,QAAD,EAAWP,IAAI,CAACS,GAAhB,EAAqBJ,KAArB,CAfM,CAAT;AAiBA,MAAIQ,aAAa,GACjBT,KAAK,CAACU,MAAN,KAAiB,CAAjB,gBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,2BACE;AAAG,MAAA,SAAS,EAAC,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF,GAKE1B,KAAK,CAAC2B,QAAN,CAAeC,OAAf,CACEV,WADF,aACEA,WADF,uBACEA,WAAW,CAAEW,GAAb,CAAkBC,IAAD,iBAAU,QAAC,QAAD;AAAU,IAAA,IAAI,EAAEA;AAAhB;AAAA;AAAA;AAAA;AAAA,UAA3B,CADF,CANF;;AAWA,QAAMC,iBAAiB,GAAG,CAACjB,WAAD,EAAckB,UAAd,KAA6B;AAAE,WAAOlB,WAAW,KAAKkB,UAAvB;AAAmC,GAA5F;;AAEA,QAAMC,gBAAgB,GAAGF,iBAAiB,CAACjB,WAAW,CAACoB,MAAb,EAAqBtB,IAAI,CAACS,GAA1B,CAAjB,iBAAqD,QAAC,UAAD;AAAY,IAAA,IAAI,EAAET;AAAlB;AAAA;AAAA;AAAA;AAAA,UAA9E;;AAEA,sBAAO;AAAA,cAAGF,MAAM,KAAK,SAAX,IAAwBe;AAA3B,mBAAP;AACD,CA1CM;;GAAMhB,Q;UAEML,W,EACOA,W,EACNA,W,EACAA,W,EAEDD,W;;;KAPNM,Q","sourcesContent":["import { unwrapResult } from \"@reduxjs/toolkit\";\r\nimport React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { PostBody } from \"../../features/posts/PostBody\";\r\nimport { getUserPost } from \"../../features/posts/postSlice\";\r\nimport { orderPostByDate } from \"../../features/Utils/OrderedPostByDate\";\r\nimport { toastError } from \"../../features/Utils/ToastMessages\";\r\n\r\nexport const UserPost = () => {\r\n  const [status, setStatus] = useState(\"idle\");\r\n  const { user } = useSelector((state) => state.user);\r\n  const { currentUser } = useSelector((state) => state.auth);\r\n  const { posts } = useSelector((state) => state.posts);\r\n  const { token } = useSelector((state) => state.auth);\r\n  const orderedPost = orderPostByDate(posts);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (token) {\r\n      (async () => {\r\n        try {\r\n          setStatus(\"pending\");\r\n          const result = await dispatch(getUserPost(user._id));\r\n          unwrapResult(result);\r\n          setStatus(\"success\");\r\n        } catch (error) {\r\n          console.log(error);\r\n          toastError(\"Something went wrong, cannot load post\");\r\n          setStatus(\"idle\");\r\n        }\r\n      })();\r\n    }\r\n  }, [dispatch, user._id, token]);\r\n\r\n  let renderContent =\r\n  posts.length === 0 ? (\r\n    <div className=\"text-center\">\r\n      <p className=\"p-2\">No posts Found</p>\r\n    </div>\r\n  ) : (\r\n    React.Children.toArray(\r\n      orderedPost?.map((post) => <PostBody post={post} />)\r\n    )\r\n  );\r\n\r\n  const checkExistingUser = (currentUser, randomUser) => { return currentUser === randomUser };\r\n\r\n  const renderDeletePost = checkExistingUser(currentUser.userid, user._id) && ( <DeletePost user={user} />);\r\n\r\n  return <>{status === \"success\" && renderContent}</>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}