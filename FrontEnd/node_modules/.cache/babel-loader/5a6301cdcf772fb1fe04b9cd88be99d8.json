{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { setupAuthHeaderForServiceCalls } from \"./ServiceHandler\";\nimport { toastSuccess } from \"../Utils/ToastMessages\";\nimport { clearLocalStorage, setlocalStorage } from \"./Storage\";\nexport const userRegisteration = createAsyncThunk(\"auth/signup\", async (values, {\n  fulfillWithValue,\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post(`https://Social-Media.saurabhsharma11.repl.co/v1/userAuth/signup`, values);\n\n    if (response.status === 201) {\n      toastSuccess(\"User Registered Successfully\");\n    }\n\n    return fulfillWithValue(response);\n  } catch (error) {\n    return rejectWithValue(error.response);\n  }\n});\nexport const login = createAsyncThunk(\"auth/login\", async (values, {\n  fulfillWithValue,\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post(`https://Social-Media.saurabhsharma11.repl.co/v1/userAuth/login`, values);\n    console.log(response);\n\n    if (response.status === 200) {\n      setupAuthHeaderForServiceCalls(response.data.token);\n      setlocalStorage(response.data.userdata, response.data.token);\n    }\n\n    return fulfillWithValue(response.data);\n  } catch (error) {\n    return rejectWithValue(error.response);\n  }\n});\nconst currentUser = {\n  username: \"\",\n  name: \"\",\n  profilePicture: \"\",\n  userid: \"\"\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState: {\n    currentUser: currentUser,\n    token: \"\",\n    status: \"idle\",\n    error: null\n  },\n  reducers: {\n    logout: state => {\n      state.status = \"idle\";\n      state.token = \"\";\n      clearLocalStorage();\n    },\n    setData: (state, action) => {\n      console.log(\"auth slice\", action.payload.userdata);\n      state.token = action.payload.token;\n      state.currentUser = action.payload.userdata;\n    },\n    updateUser: (state, action) => {\n      //console.log(action.payload);\n      state.currentUser = action.payload;\n      localStorage.setItem(\"userdata\", JSON.stringify(state.currentUser));\n    }\n  },\n  extraReducers: {\n    [login.pending]: state => {\n      state.status = \"pending\";\n    },\n    [login.fulfilled]: (state, action) => {\n      state.status = \"success\";\n      state.token = action.payload.token;\n      state.currentUser = action.payload.userdata;\n    },\n    [login.rejected]: (state, action) => {\n      state.error = action.error.message;\n      state.status = \"failed\";\n    }\n  }\n});\nexport const {\n  logout,\n  setData,\n  updateUser\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"sources":["E:/NeogCampProjects/LevelOneProjects/Social-Media/social-media-app/src/features/authentication/AuthSlice.js"],"names":["createAsyncThunk","createSlice","axios","setupAuthHeaderForServiceCalls","toastSuccess","clearLocalStorage","setlocalStorage","userRegisteration","values","fulfillWithValue","rejectWithValue","response","post","status","error","login","console","log","data","token","userdata","currentUser","username","name","profilePicture","userid","authSlice","initialState","reducers","logout","state","setData","action","payload","updateUser","localStorage","setItem","JSON","stringify","extraReducers","pending","fulfilled","rejected","message","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { setupAuthHeaderForServiceCalls } from \"./ServiceHandler\";\r\nimport { toastSuccess } from \"../Utils/ToastMessages\";\r\nimport { clearLocalStorage, setlocalStorage } from \"./Storage\";\r\n\r\nexport const userRegisteration = createAsyncThunk(\r\n    \"auth/signup\",\r\n    async (values, { fulfillWithValue, rejectWithValue }) => {\r\n        try {\r\n            const response = await axios.post(\r\n            `https://Social-Media.saurabhsharma11.repl.co/v1/userAuth/signup`,\r\n            values\r\n        );\r\n        if (response.status === 201) {\r\n            toastSuccess(\"User Registered Successfully\");\r\n        }\r\n            return fulfillWithValue(response);\r\n        } catch (error) {\r\n            return rejectWithValue(error.response);\r\n        }\r\n    }\r\n);\r\n\r\nexport const login = createAsyncThunk(\r\n    \"auth/login\",\r\n    async (values, { fulfillWithValue, rejectWithValue }) => {\r\n        try {\r\n            const response = await axios.post(\r\n            `https://Social-Media.saurabhsharma11.repl.co/v1/userAuth/login`,values\r\n        );\r\n        console.log(response);\r\n        if (response.status === 200) {\r\n            setupAuthHeaderForServiceCalls(response.data.token);\r\n            setlocalStorage(response.data.userdata, response.data.token);\r\n        }\r\n            return fulfillWithValue(response.data);\r\n        } catch (error) {\r\n            return rejectWithValue(error.response);\r\n        }\r\n    } \r\n);\r\n\r\nconst currentUser = {\r\n    username: \"\",\r\n    name: \"\",\r\n    profilePicture: \"\",\r\n    userid: \"\",\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        currentUser: currentUser,\r\n        token: \"\",\r\n        status: \"idle\",\r\n        error: null\r\n    },\r\n    reducers: {\r\n        logout: (state) => {\r\n            state.status = \"idle\";\r\n            state.token = \"\";\r\n            clearLocalStorage();\r\n        },\r\n        setData: (state, action) => {\r\n            console.log(\"auth slice\",action.payload.userdata);\r\n            state.token = action.payload.token;\r\n            state.currentUser = action.payload.userdata;\r\n        },\r\n        updateUser: (state, action) => {\r\n            //console.log(action.payload);\r\n            state.currentUser = action.payload;\r\n            localStorage.setItem(\"userdata\", JSON.stringify(state.currentUser));\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [login.pending]: (state) => {\r\n            state.status = \"pending\";\r\n        },\r\n        [login.fulfilled]: (state, action) => {\r\n            state.status = \"success\";\r\n            state.token = action.payload.token;\r\n            state.currentUser = action.payload.userdata;\r\n        },\r\n        [login.rejected]: (state, action) => {\r\n            state.error = action.error.message;\r\n            state.status = \"failed\";\r\n        },\r\n    },\r\n});\r\n  \r\nexport const { logout, setData, updateUser } = authSlice.actions;\r\n  \r\nexport default authSlice.reducer;\r\n  "]},"metadata":{},"sourceType":"module"}