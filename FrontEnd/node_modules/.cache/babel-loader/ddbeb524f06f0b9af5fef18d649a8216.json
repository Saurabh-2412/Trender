{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst fetchPosts = async () => {\n  return axios.get(\"https://social-media-server.tanaypratap.repl.co/posts\");\n};\n\nexport const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\n  const response = await fetchPosts();\n  return response.data;\n});\nexport const postSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    posts: [{\n      postID: \"p1201\",\n      caption: \"learning redux\",\n      likes: 22,\n      user: {\n        userID: \"u1234\",\n        name: \"tanay\"\n      }\n    }, {\n      postID: \"p1202\",\n      caption: \"it's frustrating to begin\",\n      likes: 24,\n      user: {\n        userID: \"u1234\",\n        name: \"tanay\"\n      }\n    }]\n  },\n  reducers: {\n    LikesClicked: (state, action) => {\n      const posts = state.posts.map(post => post.postID === action.payload ? { ...post,\n        likes: post.likes + 1\n      } : post);\n      return { ...state,\n        posts\n      };\n    },\n    DisLikesClicked: (state, action) => {\n      const postIndex = state.posts.findIndex(post => post.postID === action.payload);\n      state.posts[postIndex].likes -= 1;\n    }\n  },\n  extraReducers: {\n    [loadPosts.pending]: state => {\n      state.status = \"loading\";\n    },\n    [loadPosts.fulfilled]: (state, {\n      payload\n    }) => {\n      state.status = \"fulfilled\";\n      state.posts = payload.posts;\n    },\n    [loadPosts.rejected]: (state, action) => {\n      state.status = \"error\";\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  LikesClicked,\n  DisLikesClicked\n} = postSlice.actions;\nexport default postSlice.reducer;","map":{"version":3,"sources":["E:/NeogCampProjects/LevelOneProjects/Social-Media/social-media-app/src/features/posts/postSlice.js"],"names":["createAsyncThunk","createSlice","axios","fetchPosts","get","loadPosts","response","data","postSlice","name","initialState","posts","postID","caption","likes","user","userID","reducers","LikesClicked","state","action","map","post","payload","DisLikesClicked","postIndex","findIndex","extraReducers","pending","status","fulfilled","rejected","error","message","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAG,YAAY;AAC7B,SAAOD,KAAK,CAACE,GAAN,CAAU,uDAAV,CAAP;AACD,CAFD;;AAIA,OAAO,MAAMC,SAAS,GAAGL,gBAAgB,CAAC,iBAAD,EAAoB,YAAY;AACvE,QAAMM,QAAQ,GAAG,MAAMH,UAAU,EAAjC;AACA,SAAOG,QAAQ,CAACC,IAAhB;AACD,CAHwC,CAAlC;AAKP,OAAO,MAAMC,SAAS,GAAGP,WAAW,CAAC;AACjCQ,EAAAA,IAAI,EAAE,OAD2B;AAEjCC,EAAAA,YAAY,EAAE;AACVC,IAAAA,KAAK,EAAE,CACH;AACIC,MAAAA,MAAM,EAAE,OADZ;AAEIC,MAAAA,OAAO,EAAE,gBAFb;AAGIC,MAAAA,KAAK,EAAE,EAHX;AAIIC,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAE,OADN;AAEFP,QAAAA,IAAI,EAAE;AAFJ;AAJV,KADG,EAUH;AACIG,MAAAA,MAAM,EAAE,OADZ;AAEIC,MAAAA,OAAO,EAAE,2BAFb;AAGIC,MAAAA,KAAK,EAAE,EAHX;AAIIC,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAE,OADN;AAEFP,QAAAA,IAAI,EAAE;AAFJ;AAJV,KAVG;AADG,GAFmB;AAwBjCQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B,YAAMT,KAAK,GAAGQ,KAAK,CAACR,KAAN,CAAYU,GAAZ,CAAiBC,IAAD,IAC1BA,IAAI,CAACV,MAAL,KAAgBQ,MAAM,CAACG,OAAvB,GACE,EAAE,GAAGD,IAAL;AAAWR,QAAAA,KAAK,EAAEQ,IAAI,CAACR,KAAL,GAAa;AAA/B,OADF,GAEEQ,IAHQ,CAAd;AAKA,aAAO,EAAE,GAAGH,KAAL;AAAYR,QAAAA;AAAZ,OAAP;AACH,KARK;AASNa,IAAAA,eAAe,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAChC,YAAMK,SAAS,GAAGN,KAAK,CAACR,KAAN,CAAYe,SAAZ,CACbJ,IAAD,IAAUA,IAAI,CAACV,MAAL,KAAgBQ,MAAM,CAACG,OADnB,CAAlB;AAGAJ,MAAAA,KAAK,CAACR,KAAN,CAAYc,SAAZ,EAAuBX,KAAvB,IAAgC,CAAhC;AACH;AAdK,GAxBuB;AAwCjCa,EAAAA,aAAa,EAAE;AACX,KAACtB,SAAS,CAACuB,OAAX,GAAsBT,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACU,MAAN,GAAe,SAAf;AACH,KAHU;AAIX,KAACxB,SAAS,CAACyB,SAAX,GAAuB,CAACX,KAAD,EAAQ;AAAEI,MAAAA;AAAF,KAAR,KAAwB;AAC3CJ,MAAAA,KAAK,CAACU,MAAN,GAAe,WAAf;AACAV,MAAAA,KAAK,CAACR,KAAN,GAAcY,OAAO,CAACZ,KAAtB;AACH,KAPU;AAQX,KAACN,SAAS,CAAC0B,QAAX,GAAsB,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACU,MAAN,GAAe,OAAf;AACAV,MAAAA,KAAK,CAACa,KAAN,GAAcZ,MAAM,CAACY,KAAP,CAAaC,OAA3B;AACH;AAXU;AAxCkB,CAAD,CAA7B;AAuDP,OAAO,MAAM;AAAEf,EAAAA,YAAF;AAAgBM,EAAAA;AAAhB,IAAoChB,SAAS,CAAC0B,OAApD;AACP,eAAe1B,SAAS,CAAC2B,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst fetchPosts = async () => {\r\n  return axios.get(\"https://social-media-server.tanaypratap.repl.co/posts\");\r\n};\r\n\r\nexport const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\r\n  const response = await fetchPosts();\r\n  return response.data;\r\n});\r\n\r\nexport const postSlice = createSlice({\r\n    name: \"posts\",\r\n    initialState: {\r\n        posts: [\r\n            {\r\n                postID: \"p1201\",\r\n                caption: \"learning redux\",\r\n                likes: 22,\r\n                user: {\r\n                    userID: \"u1234\",\r\n                    name: \"tanay\"\r\n                }\r\n            },\r\n            {\r\n                postID: \"p1202\",\r\n                caption: \"it's frustrating to begin\",\r\n                likes: 24,\r\n                user: {\r\n                    userID: \"u1234\",\r\n                    name: \"tanay\"\r\n                }\r\n            },\r\n        ]\r\n    },\r\n    reducers: {\r\n        LikesClicked: (state, action) => {\r\n            const posts = state.posts.map((post) =>\r\n                post.postID === action.payload\r\n                ? { ...post, likes: post.likes + 1 }\r\n                : post\r\n            );\r\n            return { ...state, posts };\r\n        },\r\n        DisLikesClicked: (state, action) => {\r\n            const postIndex = state.posts.findIndex(\r\n                (post) => post.postID === action.payload\r\n            );\r\n            state.posts[postIndex].likes -= 1;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [loadPosts.pending]: (state) => {\r\n            state.status = \"loading\";\r\n        },\r\n        [loadPosts.fulfilled]: (state, { payload }) => {\r\n            state.status = \"fulfilled\";\r\n            state.posts = payload.posts;\r\n        },\r\n        [loadPosts.rejected]: (state, action) => {\r\n            state.status = \"error\";\r\n            state.error = action.error.message;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { LikesClicked, DisLikesClicked } = postSlice.actions;\r\nexport default postSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}