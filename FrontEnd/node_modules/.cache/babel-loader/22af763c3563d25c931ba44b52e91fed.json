{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { axios } from \"axios\";\n\nconst fetchPost = async () => {\n  return axios.get(\"https://social-media.saurabhsharma11.repl.co/v1/posts\");\n};\n\nexport const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\n  const response = await fetchPost();\n  return response.data;\n});\nconst postSlice = createSlice({\n  name: 'posts',\n  initialState: {\n    status: 'idle',\n    error: null,\n    posts: []\n  },\n  reducers: {\n    postAdded(state, action) {\n      console.log(\"postAdded\", state, action.payload);\n      state.push(action.payload);\n    },\n\n    LikesClicked: (state, action) => {\n      const posts = state.posts.map(post => post.postID === action.payload ? { ...post,\n        likes: post.likes + 1\n      } : post);\n      return { ...state,\n        posts\n      };\n    },\n    DisLikesClicked: (state, action) => {\n      const postIndex = state.posts.findIndex(post => post.postID === action.payload);\n      state.posts[postIndex].likes -= 1;\n    }\n  },\n  extraReducers: {\n    [loadPosts.pending]: state => {\n      state.status = \"loading\";\n    },\n    [loadPosts.fulfilled]: (state, {\n      payload\n    }) => {\n      state.status = \"fulfilled\";\n      state.posts = payload.posts;\n    },\n    [loadPosts.rejected]: (state, action) => {\n      state.status = \"error\";\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  postAdded,\n  LikesClicked,\n  DisLikesClicked\n} = postSlice.actions;\nexport default postSlice.reducer;","map":{"version":3,"sources":["E:/NeogCampProjects/LevelOneProjects/Social-Media/social-media-app/src/features/posts/postSlice.js"],"names":["createSlice","createAsyncThunk","axios","fetchPost","get","loadPosts","response","data","postSlice","name","initialState","status","error","posts","reducers","postAdded","state","action","console","log","payload","push","LikesClicked","map","post","postID","likes","DisLikesClicked","postIndex","findIndex","extraReducers","pending","fulfilled","rejected","message","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAqBC,gBAArB,QAA6C,kBAA7C;AACA,SAASC,KAAT,QAAsB,OAAtB;;AAEI,MAAMC,SAAS,GAAG,YAAY;AAC1B,SAAOD,KAAK,CAACE,GAAN,CAAU,uDAAV,CAAP;AACH,CAFD;;AAIA,OAAO,MAAMC,SAAS,GAAGJ,gBAAgB,CAAC,iBAAD,EAAoB,YAAY;AACrE,QAAMK,QAAQ,GAAG,MAAMH,SAAS,EAAhC;AACA,SAAOG,QAAQ,CAACC,IAAhB;AACH,CAHwC,CAAlC;AAKP,MAAMC,SAAS,GAAGR,WAAW,CAAC;AAC1BS,EAAAA,IAAI,EAAE,OADoB;AAE1BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,MAAM,EAAC,MADG;AAEVC,IAAAA,KAAK,EAAC,IAFI;AAGVC,IAAAA,KAAK,EAAC;AAHI,GAFY;AAO1BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBH,KAAxB,EAA8BC,MAAM,CAACG,OAArC;AACAJ,MAAAA,KAAK,CAACK,IAAN,CAAWJ,MAAM,CAACG,OAAlB;AACH,KAJK;;AAKNE,IAAAA,YAAY,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC7B,YAAMJ,KAAK,GAAGG,KAAK,CAACH,KAAN,CAAYU,GAAZ,CAAiBC,IAAD,IAC1BA,IAAI,CAACC,MAAL,KAAgBR,MAAM,CAACG,OAAvB,GACE,EAAE,GAAGI,IAAL;AAAWE,QAAAA,KAAK,EAAEF,IAAI,CAACE,KAAL,GAAa;AAA/B,OADF,GAEEF,IAHQ,CAAd;AAKA,aAAO,EAAE,GAAGR,KAAL;AAAYH,QAAAA;AAAZ,OAAP;AACH,KAZK;AAaNc,IAAAA,eAAe,EAAE,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAChC,YAAMW,SAAS,GAAGZ,KAAK,CAACH,KAAN,CAAYgB,SAAZ,CACbL,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgBR,MAAM,CAACG,OADnB,CAAlB;AAGAJ,MAAAA,KAAK,CAACH,KAAN,CAAYe,SAAZ,EAAuBF,KAAvB,IAAgC,CAAhC;AACH;AAlBK,GAPgB;AA2B1BI,EAAAA,aAAa,EAAC;AACV,KAACzB,SAAS,CAAC0B,OAAX,GAAsBf,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACH,KAHS;AAIV,KAACN,SAAS,CAAC2B,SAAX,GAAuB,CAAChB,KAAD,EAAQ;AAAEI,MAAAA;AAAF,KAAR,KAAwB;AAC3CJ,MAAAA,KAAK,CAACL,MAAN,GAAe,WAAf;AACAK,MAAAA,KAAK,CAACH,KAAN,GAAcO,OAAO,CAACP,KAAtB;AACH,KAPS;AAQV,KAACR,SAAS,CAAC4B,QAAX,GAAsB,CAACjB,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACL,MAAN,GAAe,OAAf;AACAK,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACL,KAAP,CAAasB,OAA3B;AACH;AAXS;AA3BY,CAAD,CAA7B;AA0CJ,OAAO,MAAM;AAAEnB,EAAAA,SAAF;AAAaO,EAAAA,YAAb;AAA2BK,EAAAA;AAA3B,IAA+CnB,SAAS,CAAC2B,OAA/D;AACP,eAAe3B,SAAS,CAAC4B,OAAzB","sourcesContent":["import { createSlice,createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { axios } from \"axios\";\r\n\r\n    const fetchPost = async () => {\r\n        return axios.get(\"https://social-media.saurabhsharma11.repl.co/v1/posts\");\r\n    }\r\n\r\n    export const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\r\n        const response = await fetchPost();\r\n        return response.data;\r\n    });\r\n\r\n    const postSlice = createSlice({\r\n        name: 'posts',\r\n        initialState: {\r\n            status:'idle',\r\n            error:null,\r\n            posts:[]\r\n        },\r\n        reducers: {\r\n            postAdded(state, action) {\r\n                console.log(\"postAdded\",state,action.payload);\r\n                state.push(action.payload);\r\n            },\r\n            LikesClicked: (state, action) => {\r\n                const posts = state.posts.map((post) =>\r\n                    post.postID === action.payload\r\n                    ? { ...post, likes: post.likes + 1 }\r\n                    : post\r\n                );\r\n                return { ...state, posts };\r\n            },\r\n            DisLikesClicked: (state, action) => {\r\n                const postIndex = state.posts.findIndex(\r\n                    (post) => post.postID === action.payload\r\n                );\r\n                state.posts[postIndex].likes -= 1;\r\n            }\r\n        },\r\n        extraReducers:{\r\n            [loadPosts.pending]: (state) => {\r\n                state.status = \"loading\";\r\n            },\r\n            [loadPosts.fulfilled]: (state, { payload }) => {\r\n                state.status = \"fulfilled\";\r\n                state.posts = payload.posts;\r\n            },\r\n            [loadPosts.rejected]: (state, action) => {\r\n                state.status = \"error\";\r\n                state.error = action.error.message;\r\n            }\r\n        }\r\n    })\r\n\r\nexport const { postAdded, LikesClicked, DisLikesClicked } = postSlice.actions;\r\nexport default postSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}