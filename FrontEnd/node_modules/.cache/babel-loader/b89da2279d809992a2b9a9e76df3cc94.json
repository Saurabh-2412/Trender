{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst fetchPosts = async () => {\n  return axios.get(\"https://social-media-server.tanaypratap.repl.co/posts\");\n};\n\nexport const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\n  const response = await fetchPosts();\n  return response.data;\n});\nexport const postSlice = createSlice({\n  name: \"posts\",\n  initialState: [{\n    postID: \"p1201\",\n    caption: \"learning redux\",\n    likes: 22,\n    user: {\n      userID: \"u1234\",\n      name: \"tanay\"\n    }\n  }, {\n    postID: \"p1202\",\n    caption: \"it's frustrating to begin\",\n    likes: 24,\n    user: {\n      userID: \"u1234\",\n      name: \"tanay\"\n    }\n  }],\n  reducers: {\n    postAdded(state, action) {\n      console.log(\"postAdded\", state, action.payload); //state.push(action.payload);\n    },\n\n    LikesClicked: (state, action) => {\n      const posts = state.posts.map(post => post.postID === action.payload ? { ...post,\n        likes: post.likes + 1\n      } : post);\n      return { ...state,\n        posts\n      };\n    },\n    DisLikesClicked: (state, action) => {\n      const postIndex = state.posts.findIndex(post => post.postID === action.payload);\n      state.posts[postIndex].likes -= 1;\n    }\n  },\n  extraReducers: {\n    [loadPosts.pending]: state => {\n      state.status = \"loading\";\n    },\n    [loadPosts.fulfilled]: (state, {\n      payload\n    }) => {\n      state.status = \"fulfilled\";\n      state.posts = payload.posts;\n    },\n    [loadPosts.rejected]: (state, action) => {\n      state.status = \"error\";\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  LikesClicked,\n  DisLikesClicked,\n  postAdded\n} = postSlice.actions;\nexport default postSlice.reducer;","map":{"version":3,"sources":["E:/NeogCampProjects/LevelOneProjects/Social-Media/social-media-app/src/features/posts/postSlice.js"],"names":["createAsyncThunk","createSlice","axios","fetchPosts","get","loadPosts","response","data","postSlice","name","initialState","postID","caption","likes","user","userID","reducers","postAdded","state","action","console","log","payload","LikesClicked","posts","map","post","DisLikesClicked","postIndex","findIndex","extraReducers","pending","status","fulfilled","rejected","error","message","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst fetchPosts = async () => {\r\n  return axios.get(\"https://social-media-server.tanaypratap.repl.co/posts\");\r\n};\r\n\r\nexport const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\r\n  const response = await fetchPosts();\r\n  return response.data;\r\n});\r\n\r\nexport const postSlice = createSlice({\r\n    name: \"posts\",\r\n    initialState: [\r\n        {\r\n            postID: \"p1201\",\r\n            caption: \"learning redux\",\r\n            likes: 22,\r\n            user: {\r\n                userID: \"u1234\",\r\n                name: \"tanay\"\r\n            }\r\n        },\r\n        {\r\n            postID: \"p1202\",\r\n            caption: \"it's frustrating to begin\",\r\n            likes: 24,\r\n            user: {\r\n                userID: \"u1234\",\r\n                name: \"tanay\"\r\n            }\r\n        }\r\n    ],\r\n    reducers: {\r\n        postAdded(state, action) {\r\n            console.log(\"postAdded\",state,action.payload);\r\n            //state.push(action.payload);\r\n        },\r\n        LikesClicked: (state, action) => {\r\n            const posts = state.posts.map((post) =>\r\n                post.postID === action.payload\r\n                ? { ...post, likes: post.likes + 1 }\r\n                : post\r\n            );\r\n            return { ...state, posts };\r\n        },\r\n        DisLikesClicked: (state, action) => {\r\n            const postIndex = state.posts.findIndex(\r\n                (post) => post.postID === action.payload\r\n            );\r\n            state.posts[postIndex].likes -= 1;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [loadPosts.pending]: (state) => {\r\n            state.status = \"loading\";\r\n        },\r\n        [loadPosts.fulfilled]: (state, { payload }) => {\r\n            state.status = \"fulfilled\";\r\n            state.posts = payload.posts;\r\n        },\r\n        [loadPosts.rejected]: (state, action) => {\r\n            state.status = \"error\";\r\n            state.error = action.error.message;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { LikesClicked, DisLikesClicked, postAdded } = postSlice.actions;\r\nexport default postSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}