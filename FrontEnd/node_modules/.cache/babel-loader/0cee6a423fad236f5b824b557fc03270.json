{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst fetchPosts = async () => {\n  return axios.get(\"https://social-media-server.tanaypratap.repl.co/posts\");\n};\n\nexport const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\n  const response = await fetchPosts();\n  return response.data;\n});\nconst initialState = [{\n  id: '1',\n  title: 'First Post!',\n  content: 'Hello!'\n}, {\n  id: '2',\n  title: 'Second Post',\n  content: 'More text'\n}];\nexport const postSlice = createSlice({\n  name: \"posts\",\n  initialState,\n  reducers: {\n    postAdded(state, action) {\n      console.log(\"postAdded\", state, action.payload);\n      state.push(action.payload);\n    },\n\n    LikesClicked: (state, action) => {\n      const posts = state.posts.map(post => post.postID === action.payload ? { ...post,\n        likes: post.likes + 1\n      } : post);\n      return { ...state,\n        posts\n      };\n    },\n    DisLikesClicked: (state, action) => {\n      const postIndex = state.posts.findIndex(post => post.postID === action.payload);\n      state.posts[postIndex].likes -= 1;\n    }\n  },\n  extraReducers: {\n    [loadPosts.pending]: state => {\n      state.status = \"loading\";\n    },\n    [loadPosts.fulfilled]: (state, {\n      payload\n    }) => {\n      state.status = \"fulfilled\";\n      state.posts = payload.posts;\n    },\n    [loadPosts.rejected]: (state, action) => {\n      state.status = \"error\";\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  LikesClicked,\n  DisLikesClicked,\n  postAdded\n} = postSlice.actions;\nexport default postSlice.reducer;","map":{"version":3,"sources":["E:/NeogCampProjects/LevelOneProjects/Social-Media/social-media-app/src/features/posts/postSlice.js"],"names":["createAsyncThunk","createSlice","axios","fetchPosts","get","loadPosts","response","data","initialState","id","title","content","postSlice","name","reducers","postAdded","state","action","console","log","payload","push","LikesClicked","posts","map","post","postID","likes","DisLikesClicked","postIndex","findIndex","extraReducers","pending","status","fulfilled","rejected","error","message","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAU,GAAG,YAAY;AAC7B,SAAOD,KAAK,CAACE,GAAN,CAAU,uDAAV,CAAP;AACD,CAFD;;AAIA,OAAO,MAAMC,SAAS,GAAGL,gBAAgB,CAAC,iBAAD,EAAoB,YAAY;AACvE,QAAMM,QAAQ,GAAG,MAAMH,UAAU,EAAjC;AACA,SAAOG,QAAQ,CAACC,IAAhB;AACD,CAHwC,CAAlC;AAKP,MAAMC,YAAY,GAAG,CACjB;AAAEC,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE;AAA1C,CADiB,EAEjB;AAAEF,EAAAA,EAAE,EAAE,GAAN;AAAWC,EAAAA,KAAK,EAAE,aAAlB;AAAiCC,EAAAA,OAAO,EAAE;AAA1C,CAFiB,CAArB;AAKA,OAAO,MAAMC,SAAS,GAAGX,WAAW,CAAC;AACjCY,EAAAA,IAAI,EAAE,OAD2B;AAEjCL,EAAAA,YAFiC;AAGjCM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBH,KAAxB,EAA8BC,MAAM,CAACG,OAArC;AACAJ,MAAAA,KAAK,CAACK,IAAN,CAAWJ,MAAM,CAACG,OAAlB;AACH,KAJK;;AAKNE,IAAAA,YAAY,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC7B,YAAMM,KAAK,GAAGP,KAAK,CAACO,KAAN,CAAYC,GAAZ,CAAiBC,IAAD,IAC1BA,IAAI,CAACC,MAAL,KAAgBT,MAAM,CAACG,OAAvB,GACE,EAAE,GAAGK,IAAL;AAAWE,QAAAA,KAAK,EAAEF,IAAI,CAACE,KAAL,GAAa;AAA/B,OADF,GAEEF,IAHQ,CAAd;AAKA,aAAO,EAAE,GAAGT,KAAL;AAAYO,QAAAA;AAAZ,OAAP;AACH,KAZK;AAaNK,IAAAA,eAAe,EAAE,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AAChC,YAAMY,SAAS,GAAGb,KAAK,CAACO,KAAN,CAAYO,SAAZ,CACbL,IAAD,IAAUA,IAAI,CAACC,MAAL,KAAgBT,MAAM,CAACG,OADnB,CAAlB;AAGAJ,MAAAA,KAAK,CAACO,KAAN,CAAYM,SAAZ,EAAuBF,KAAvB,IAAgC,CAAhC;AACH;AAlBK,GAHuB;AAuBjCI,EAAAA,aAAa,EAAE;AACX,KAAC1B,SAAS,CAAC2B,OAAX,GAAsBhB,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACiB,MAAN,GAAe,SAAf;AACH,KAHU;AAIX,KAAC5B,SAAS,CAAC6B,SAAX,GAAuB,CAAClB,KAAD,EAAQ;AAAEI,MAAAA;AAAF,KAAR,KAAwB;AAC3CJ,MAAAA,KAAK,CAACiB,MAAN,GAAe,WAAf;AACAjB,MAAAA,KAAK,CAACO,KAAN,GAAcH,OAAO,CAACG,KAAtB;AACH,KAPU;AAQX,KAAClB,SAAS,CAAC8B,QAAX,GAAsB,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AACrCD,MAAAA,KAAK,CAACiB,MAAN,GAAe,OAAf;AACAjB,MAAAA,KAAK,CAACoB,KAAN,GAAcnB,MAAM,CAACmB,KAAP,CAAaC,OAA3B;AACH;AAXU;AAvBkB,CAAD,CAA7B;AAsCP,OAAO,MAAM;AAAEf,EAAAA,YAAF;AAAgBM,EAAAA,eAAhB;AAAiCb,EAAAA;AAAjC,IAA+CH,SAAS,CAAC0B,OAA/D;AACP,eAAe1B,SAAS,CAAC2B,OAAzB","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst fetchPosts = async () => {\r\n  return axios.get(\"https://social-media-server.tanaypratap.repl.co/posts\");\r\n};\r\n\r\nexport const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\r\n  const response = await fetchPosts();\r\n  return response.data;\r\n});\r\n\r\nconst initialState = [\r\n    { id: '1', title: 'First Post!', content: 'Hello!' },\r\n    { id: '2', title: 'Second Post', content: 'More text' }\r\n]\r\n\r\nexport const postSlice = createSlice({\r\n    name: \"posts\",\r\n    initialState,\r\n    reducers: {\r\n        postAdded(state, action) {\r\n            console.log(\"postAdded\",state,action.payload);\r\n            state.push(action.payload);\r\n        },\r\n        LikesClicked: (state, action) => {\r\n            const posts = state.posts.map((post) =>\r\n                post.postID === action.payload\r\n                ? { ...post, likes: post.likes + 1 }\r\n                : post\r\n            );\r\n            return { ...state, posts };\r\n        },\r\n        DisLikesClicked: (state, action) => {\r\n            const postIndex = state.posts.findIndex(\r\n                (post) => post.postID === action.payload\r\n            );\r\n            state.posts[postIndex].likes -= 1;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [loadPosts.pending]: (state) => {\r\n            state.status = \"loading\";\r\n        },\r\n        [loadPosts.fulfilled]: (state, { payload }) => {\r\n            state.status = \"fulfilled\";\r\n            state.posts = payload.posts;\r\n        },\r\n        [loadPosts.rejected]: (state, action) => {\r\n            state.status = \"error\";\r\n            state.error = action.error.message;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { LikesClicked, DisLikesClicked, postAdded } = postSlice.actions;\r\nexport default postSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}