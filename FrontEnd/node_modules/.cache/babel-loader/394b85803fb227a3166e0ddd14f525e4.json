{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { toastSuccess } from \"../Utils/ToastMessages\";\nimport { setupAuthHeaderForServiceCalls } from \"./ServiceHandler\";\nimport { clearLocalStorage, setlocalStorage } from \"./Storage\";\nexport const userRegisteration = createAsyncThunk(\"auth/signup\", async (values, {\n  fulfillWithValue,\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post(\"https://Social-Media.saurabhsharma11.repl.co/v1/userAuth/signup\", values);\n\n    if (response.status === 201) {\n      toastSuccess(\"User Registered Successfully\");\n    }\n\n    return fulfillWithValue(response);\n  } catch (error) {\n    return rejectWithValue(error.response);\n  }\n});\nexport const login = createAsyncThunk(\"auth/login\", async (values, {\n  fulfillWithValue,\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post(\"https://Social-Media.saurabhsharma11.repl.co/v1/userAuth/login\", values);\n    console.log(response);\n\n    if (response.status === 200) {\n      setupAuthHeaderForServiceCalls(response.data.token);\n      setlocalStorage(response.data.userdata, response.data.token);\n    }\n\n    return fulfillWithValue(response.data);\n  } catch (error) {\n    return rejectWithValue(error.response);\n  }\n});\nconst currentUser = {\n  username: \"\",\n  name: \"\",\n  profilePicture: \"\",\n  userid: \"\"\n};\nconst AuthSlice = createSlice({\n  name: \"Auth\",\n  initialState: {\n    currentUser: currentUser,\n    token: \"\",\n    status: \"idle\",\n    error: null\n  },\n  reducers: {},\n  extraReducers: {\n    [login.pending]: state => {\n      state.status = \"pending\";\n    },\n    [login.fulfilled]: (state, action) => {\n      state.status = \"success\";\n      state.token = action.payload.token;\n      state.currentUser = action.payload.userdata;\n    }\n  }\n});","map":{"version":3,"sources":["E:/NeogCampProjects/LevelOneProjects/Social-Media/social-media-app/src/features/authentication/AuthSlice.js"],"names":["createAsyncThunk","createSlice","axios","toastSuccess","setupAuthHeaderForServiceCalls","clearLocalStorage","setlocalStorage","userRegisteration","values","fulfillWithValue","rejectWithValue","response","post","status","error","login","console","log","data","token","userdata","currentUser","username","name","profilePicture","userid","AuthSlice","initialState","reducers","extraReducers","pending","state","fulfilled","action","payload"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,8BAAT,QAA+C,kBAA/C;AACA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,WAAnD;AAEA,OAAO,MAAMC,iBAAiB,GAAGP,gBAAgB,CAAC,aAAD,EAAe,OAAMQ,MAAN,EAAc;AAAEC,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,CAAd,KAAuD;AACnH,MAAG;AACC,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAN,CAAW,iEAAX,EAA8EJ,MAA9E,CAAvB;;AACA,QAAGG,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;AACvBV,MAAAA,YAAY,CAAC,8BAAD,CAAZ;AACH;;AACD,WAAOM,gBAAgB,CAACE,QAAD,CAAvB;AACH,GAND,CAOA,OAAMG,KAAN,EAAY;AACR,WAAOJ,eAAe,CAACI,KAAK,CAACH,QAAP,CAAtB;AACH;AACJ,CAXgD,CAA1C;AAaP,OAAO,MAAMI,KAAK,GAAGf,gBAAgB,CACjC,YADiC,EAEjC,OAAOQ,MAAP,EAAe;AAAEC,EAAAA,gBAAF;AAAoBC,EAAAA;AAApB,CAAf,KAAyD;AACrD,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAN,CACnB,gEADmB,EAC8CJ,MAD9C,CAAvB;AAGAQ,IAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;;AACA,QAAIA,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzBT,MAAAA,8BAA8B,CAACO,QAAQ,CAACO,IAAT,CAAcC,KAAf,CAA9B;AACAb,MAAAA,eAAe,CAACK,QAAQ,CAACO,IAAT,CAAcE,QAAf,EAAyBT,QAAQ,CAACO,IAAT,CAAcC,KAAvC,CAAf;AACH;;AACD,WAAOV,gBAAgB,CAACE,QAAQ,CAACO,IAAV,CAAvB;AACH,GAVD,CAUE,OAAOJ,KAAP,EAAc;AACZ,WAAOJ,eAAe,CAACI,KAAK,CAACH,QAAP,CAAtB;AACH;AACJ,CAhBgC,CAA9B;AAmBP,MAAMU,WAAW,GAAG;AAChBC,EAAAA,QAAQ,EAAE,EADM;AAEhBC,EAAAA,IAAI,EAAE,EAFU;AAGhBC,EAAAA,cAAc,EAAE,EAHA;AAIhBC,EAAAA,MAAM,EAAE;AAJQ,CAApB;AAOA,MAAMC,SAAS,GAAGzB,WAAW,CAAC;AAC1BsB,EAAAA,IAAI,EAAG,MADmB;AAE1BI,EAAAA,YAAY,EAAG;AACXN,IAAAA,WAAW,EAAEA,WADF;AAEXF,IAAAA,KAAK,EAAE,EAFI;AAGXN,IAAAA,MAAM,EAAE,MAHG;AAIXC,IAAAA,KAAK,EAAE;AAJI,GAFW;AAQ1Bc,EAAAA,QAAQ,EAAG,EARe;AAW1BC,EAAAA,aAAa,EAAG;AACZ,KAAEd,KAAK,CAACe,OAAR,GAAoBC,KAAD,IAAW;AAC1BA,MAAAA,KAAK,CAAClB,MAAN,GAAe,SAAf;AACH,KAHW;AAIZ,KAAEE,KAAK,CAACiB,SAAR,GAAqB,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACpCF,MAAAA,KAAK,CAAClB,MAAN,GAAe,SAAf;AACAkB,MAAAA,KAAK,CAACZ,KAAN,GAAcc,MAAM,CAACC,OAAP,CAAef,KAA7B;AACAY,MAAAA,KAAK,CAACV,WAAN,GAAoBY,MAAM,CAACC,OAAP,CAAed,QAAnC;AACH;AARW;AAXU,CAAD,CAA7B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\nimport { toastSuccess } from \"../Utils/ToastMessages\";\r\nimport { setupAuthHeaderForServiceCalls } from \"./ServiceHandler\";\r\nimport { clearLocalStorage, setlocalStorage } from \"./Storage\";\r\n\r\nexport const userRegisteration = createAsyncThunk(\"auth/signup\",async(values, { fulfillWithValue, rejectWithValue }) =>{\r\n    try{\r\n        const response = await axios.post(\"https://Social-Media.saurabhsharma11.repl.co/v1/userAuth/signup\", values);\r\n        if(response.status === 201){\r\n            toastSuccess(\"User Registered Successfully\");\r\n        }\r\n        return fulfillWithValue(response);\r\n    }\r\n    catch(error){\r\n        return rejectWithValue(error.response);\r\n    }\r\n})\r\n\r\nexport const login = createAsyncThunk(\r\n    \"auth/login\",\r\n    async (values, { fulfillWithValue, rejectWithValue }) => {\r\n        try {\r\n            const response = await axios.post(\r\n                \"https://Social-Media.saurabhsharma11.repl.co/v1/userAuth/login\",values\r\n            );\r\n            console.log(response)\r\n            if (response.status === 200) {\r\n                setupAuthHeaderForServiceCalls(response.data.token);\r\n                setlocalStorage(response.data.userdata, response.data.token);\r\n            }\r\n            return fulfillWithValue(response.data);\r\n        } catch (error) {\r\n            return rejectWithValue(error.response);\r\n        }\r\n    }\r\n);\r\n\r\nconst currentUser = {\r\n    username: \"\",\r\n    name: \"\",\r\n    profilePicture: \"\",\r\n    userid: \"\"\r\n};\r\n\r\nconst AuthSlice = createSlice({\r\n    name : \"Auth\",\r\n    initialState : {\r\n        currentUser: currentUser,\r\n        token: \"\",\r\n        status: \"idle\",\r\n        error: null,\r\n    },\r\n    reducers : {\r\n        \r\n    },\r\n    extraReducers : {\r\n        [ login.pending ]: (state) => {\r\n            state.status = \"pending\";\r\n        },\r\n        [ login.fulfilled ]: (state, action) => {\r\n            state.status = \"success\";\r\n            state.token = action.payload.token;\r\n            state.currentUser = action.payload.userdata\r\n        }\r\n\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}