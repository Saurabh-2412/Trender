{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nconst fetchPosts = async () => {\n  return axios.get(\"https://Social-Media.saurabhsharma11.repl.co/v1/posts\");\n};\n\nexport const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\n  const response = await fetchPosts();\n  return response.data;\n});\nexport const createPost = createAsyncThunk(\"post/createPost\", async ({\n  content\n}, {\n  fulfillWithValue,\n  rejectWithValue\n}) => {\n  let postData = {\n    userID: \"123456\",\n    image: \"something\",\n    desc: content,\n    status: \"A\",\n    likes: 0,\n    comments: [],\n    createdDate: Date.now(),\n    modifiedData: Date.now()\n  };\n  console.log(\"postData\", postData);\n\n  try {\n    const {\n      data\n    } = await axios.post(\"https://social-media.saurabhsharma11.repl.co/v1/posts\", postData);\n    return fulfillWithValue(data.post);\n  } catch (error) {\n    return rejectWithValue(error.response);\n  }\n});\nexport const postSlice = createSlice({\n  name: \"posts\",\n  initialState: {\n    status: \"idle\",\n    error: null,\n    posts: []\n  },\n  reducers: {\n    postAdded(state, action) {\n      console.log(action.payload);\n      console.log(state);\n      state.posts.push(action.payload);\n    },\n\n    LikesClicked: (state, action) => {\n      const posts = state.posts.map(post => post.postID === action.payload ? { ...post,\n        likes: post.likes + 1\n      } : post);\n      return { ...state,\n        posts\n      };\n    },\n    DisLikesClicked: (state, action) => {\n      const postIndex = state.posts.findIndex(post => post.postID === action.payload);\n      state.posts[postIndex].likes -= 1;\n    }\n  },\n  extraReducers: {\n    [createPost.fulfilled]: (state, action) => {\n      state.posts.push(action.payload);\n      console.log(\"reducer\", action.payload.post);\n    },\n    [loadPosts.pending]: state => {\n      state.status = \"loading\";\n    },\n    [loadPosts.fulfilled]: (state, {\n      payload\n    }) => {\n      state.status = \"fulfilled\";\n      state.posts = payload.posts;\n    },\n    [loadPosts.rejected]: (state, action) => {\n      state.status = \"error\";\n      state.error = action.error.message;\n    }\n  }\n});\nexport const {\n  LikesClicked,\n  DisLikesClicked,\n  postAdded\n} = postSlice.actions;\nexport default postSlice.reducer;","map":{"version":3,"sources":["E:/NeogCampProjects/LevelOneProjects/Social-Media/social-media-app/src/features/posts/postSlice.js"],"names":["createAsyncThunk","createSlice","axios","fetchPosts","get","loadPosts","response","data","createPost","content","fulfillWithValue","rejectWithValue","postData","userID","image","desc","status","likes","comments","createdDate","Date","now","modifiedData","console","log","post","error","postSlice","name","initialState","posts","reducers","postAdded","state","action","payload","push","LikesClicked","map","postID","DisLikesClicked","postIndex","findIndex","extraReducers","fulfilled","pending","rejected","message","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst fetchPosts = async () => {\r\n    return axios.get(\"https://Social-Media.saurabhsharma11.repl.co/v1/posts\");\r\n};\r\n\r\nexport const loadPosts = createAsyncThunk(\"posts/loadPosts\", async () => {\r\n    const response = await fetchPosts();\r\n    return response.data;\r\n});\r\n\r\nexport const createPost = createAsyncThunk(\"post/createPost\",\r\n    async ({ content }, { fulfillWithValue, rejectWithValue }) => {\r\n        let postData = {\r\n            userID: \"123456\",\r\n            image: \"something\",\r\n            desc: content,\r\n            status: \"A\",\r\n            likes: 0,\r\n            comments: [],\r\n            createdDate: Date.now(),\r\n            modifiedData: Date.now()\r\n        };\r\n        console.log(\"postData\",postData)\r\n        try {\r\n            const { data } = await axios.post(\r\n            \"https://social-media.saurabhsharma11.repl.co/v1/posts\",\r\n                postData\r\n            );\r\n            return fulfillWithValue(data.post);\r\n        } catch (error) {\r\n            return rejectWithValue(error.response);\r\n        }\r\n    }\r\n);\r\n\r\nexport const postSlice = createSlice({\r\n    name: \"posts\",\r\n    initialState: {\r\n        status: \"idle\",\r\n        error: null,\r\n        posts: []\r\n    },\r\n    reducers: {\r\n        postAdded(state, action) {\r\n            console.log(action.payload);\r\n            console.log(state);\r\n            state.posts.push(action.payload);\r\n        },\r\n        LikesClicked: (state, action) => {\r\n            const posts = state.posts.map((post) =>\r\n                post.postID === action.payload\r\n                ? { ...post, likes: post.likes + 1 }\r\n                : post\r\n            );\r\n            return { ...state, posts };\r\n        },\r\n        DisLikesClicked: (state, action) => {\r\n            const postIndex = state.posts.findIndex(\r\n                (post) => post.postID === action.payload\r\n            );\r\n            state.posts[postIndex].likes -= 1;\r\n        }\r\n    },\r\n    extraReducers: {\r\n        [createPost.fulfilled]: (state, action) => {\r\n            state.posts.push(action.payload);\r\n            console.log(\"reducer\", action.payload.post);\r\n        },\r\n        [loadPosts.pending]: (state) => {\r\n            state.status = \"loading\";\r\n        },\r\n        [loadPosts.fulfilled]: (state, { payload }) => {\r\n            state.status = \"fulfilled\";\r\n            state.posts = payload.posts;\r\n        },\r\n        [loadPosts.rejected]: (state, action) => {\r\n            state.status = \"error\";\r\n            state.error = action.error.message;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { LikesClicked, DisLikesClicked, postAdded } = postSlice.actions;\r\nexport default postSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}